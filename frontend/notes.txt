Frontend:
---------
    The technology used to develop webpages/websites/web application.
    1.Html(Hypertext Markup Language)
    2.CSS(Cascading Style Sheets)
    3.JS(javascript)

Html:
-----
   - It is a markup language. 
   - It is used for structuring/layout the webpage.
Css:
----
   - it is used for styling the webpage.
   - It is a style sheet language.
Javascript:
-----------
   - It is a programming/scripting language.
   - It is used for adding functionality to the webpage.


Backend:
--------
   - It is the server side of the web application.
   - It is used to handle the data and logic of the web application.
   - It is used to connect the frontend with the database.

   ex: Java , PHP , Python, Node js etc .,

Database:
---------
    - It is a container for storing/managing/retrieving the data.
   ex: MySQL , MongoDB , Oracle etc .

FullStack:
----------
   - It is a combination of frontend and backend development
     (server side+database).

static website/web pages:
------------------------
          - the webpage/website is same for all the users.
          - It is static in nature.
          ex: wikipedia ,blogs etc.
dynamic website/web pages:
-------------------------
          - the webpage/website is different for all the users.
          - It is dynamic in nature.
          ex: facebook , youtube , amazon etc.


Single page application:(SPA)
-------------------------
          - It is a web application that has only one html page.
    ex: amazon , gmail ,netflix etc.

Multi page application:(MPA)
-----------------------
         - It is a web application that has multiple html pages.
     ex: flipkart , youtube etc.

Library:
---------
          - It is a collection of reusable code.
          - The code can be used in multiple projects.
          - can call library into our project whenever required.
          ex: jQuery , Bootstrap , React etc.

Framework:
---------
          - It is a collection of libraries.
          - The code can be used in multiple projects.
          ex: Angular , Spring , Hibernate etc.
          - Our code will be called into the framework.

Deployment:(Production Deployment)
-----------
       - It is the process of deploying/releasing the web application
         to every one in web(internet).
steps:
-----
   1.develop the web application.(frontend+backend)
   2.Integrate the web application with the database.
   3.compress project into zip or tar or rar file.
   4.upload the zip/tar/rar file to the server.
    (ex: AWS , Digital Ocean,Netlify,render,Heroku,Github pages etc.)
   5.access the web application from the browser.

-----------------------------------------------------------------------------------------

structure of a web page:
--------------------------

tag:
   -it is a keyword in html, 
   - which is used to describe the content of the webpage.
   - and enclosed in angle brackets.
    ex: <html> , <head> , <body> , <h1> , <p> , <a> , <img> etc.

paired tag/container tag:
   - The content is enclosed with the help of opening and closing tag.
    ex: <div> , <span> , <table> , <tr> , <td> , <th> etc.

unpaired tag/self closing tag/non container tag:
   - The content is enclosed with the help of opening tag only.
    ex: <br> , <hr> , <meta> , <link> , <input> , <img> etc.

element:
   - The content is enclosed with the help of paired tag.
    ex: <h1> , <p> , <a> , <img> etc. 


Tags:
-----
   1.heading tags: used to describe the heading of the webpage.
       ex: <h1> , <h2> , <h3> , <h4> , <h5> , <h6> 
   2.paragraph tags: used to describe the paragraph of the webpage.
       ex: <p></p>
   3.Italic tags: used to describe the italics of the webpage.
       ex: <i></i>   <em></em>---emphasis
   4.Bold tags: used to describe the bold of the webpage.
       ex: <b></b>   <strong></strong>
   5.Underline tags: used to describe the underline of the webpage.
       ex: <u></u>
   6.del tags: used to describe the delete content of the webpage.
       ex: <del></del> <strike></strike>
   7.pre tags: used to describe the preformatted text of the webpage.
       ex: <pre></pre>
   8.mark tags: used to describe the marked content of the webpage.
       ex: <mark></mark>
   9.small tags: used to describe the small content of the webpage.
       ex: <small></small>
   10.details tags: used to describe the details of the webpage.
       ex: <details></details>
   11.summary tags: used to describe the summary of the webpage.
       ex: <summary></summary>
   12.break tags: used to  the break  the content.
       ex: <br>
   13.horizontal rule tags: used to have the horizontal rule line.
       ex: <hr>
   14.subscript tags: used to have the subscript of the text.
       ex: <sub></sub>
   15.superscript tags: used to have the superscript of the text.
       ex: <sup></sup>
   16.quote tags: used to have the quote of the text.
       ex: <q></q>
   17.blockquote tags: used to have the blockquote of the text.
       ex: <blockquote></blockquote>
   18.div tags: used to have the div of the text.
       ex: <div></div>
   19.span tags: used to have the span of the text.
       ex: <span></span>

----------------------------------------------------------------------
    div                                      span
----------------------------------------------------------------------
block level element                         inline element

width and height can be                    width and height cannot be
applicable                                    applicable
----------------------------------------------------------------------

----------------------------------------------------------------------
block level element                         inline element
------------------------------------------------------------------------
It occupies the full                   It Occupies required space
width of the page.   

width and height can be                width and height can be
applicable                             applicable
-------------------------------------------------------------------------

to convert block level element to inline element :

    syntax:   
    display:inline
    display:inline-block // can act like block level element and inline

to convert inline element to block level element:
    syntax:
    display:block

CSS:(Cascading Style Sheets)
----
   - It is a style sheet language.
   - It is used to style the webpage.
   - element can style in three ways
                 1.inline style
                 2.internal style
                 3.external style
Inline style:
-------------
   - style element with the help of style attribute.
   syntax: <element style="property1: value1;property2: value2">
           </element>

    - used for styling one element only.
Internal style:
---------------
      - style element with the help of style tag.
      syntax: <style>
                   selector{
                       property1: value1;
                       property2: value2;
                   }
              </style>

    - used for styling multiple elements in one go with in same page.
External style:
---------------
     - style element with the help of external style sheet.
     - style sheet file is created with ____.css(extension)
     syntax: <link rel="stylesheet" href="style.css">
            rel: relationship
            href: hyper reference(file path)
     - used for styling multiple elements in one go with in 
       multiple pages.

Selector:
+++++++++
         - selector is used to select the element to style.
         Types:
            1.element selector
            2.id selector
            3.class selector
            4.grouping selector
            5.attribute selector
            6.universal selector
            7.combined selector
                     1.child selector
                     2.descendant selector
                     3.adjacent sibling selector
                     4.general sibling selector
            8.pseudo class selector
            9.pseudo element selector

1.element selector:
-------------------
        - selector is used to select the element based on tagName
        syntax: tagName{
                    property1: value1;
                    property2: value2;
                }
2.id selector:
-------------------
        - selector is used to select the element based on id
        <element id="idName"></element>
        syntax: #idName{
            
        }
        - id name should be unique.
3.class selector:
-------------------
        - selector is used to select the element based on class
        <element class="className"></element>
        syntax: .className{
        }
        - class name can be used multiple times irrespective of tagName.
        
4.grouping selector:
--------------------
    - selector is used for group of selectors
    syntax:
      selector1, selector2,selector3{

      }

5.universal selector:
---------------------
      - selector is used to select all the elements.
      syntax:
       *{
           margin: 0;
           padding: 0;
           box-sizing: border-box;
      }
6.attribute selector:
---------------------
        - selector is used to select the element based on attribute.
        syntax: [attributeName="attributeValue"]{

          }
7.Combined selector:
-------------------
        - selector is used to select the element based on combined selector.
         Types:
            1.child selector: used to select the direct child of the element.
                            : selector1 > selector2{
                                
                            }  
            2.descendant selector: used to select the direct and indirect child of the element.
                            : selector1 selector2{
                
                            } 
            3.adjacent sibling selector: used to select the adjacent sibling of the element.
                            : selector1 + selector2{
                
                            }
            4.general sibling selector: used to select the general sibling of the element.
                            : selector1 ~ selector2{
                
                            }
             

pseudo element :
-----------------
       used to select an  specific part of an element 
       indicating ::(double colon)
       ex :   
          ::first-letter  , ::first-line  , ::selection  ,:: before  , ::after , ::marker
pseudo class  :
--------------
      used to select based on its state
      indicating with :(colon)
      ex :
       :link  , :active , :visited , :hover 


   +-----------------------------------------------------------------------------------+
   |  Css Specificity Rule:                                                            |
   |  ---------------------                                                            |
   |  Inline > ID > Class/Attribute/Pseudo-class > Element/Pseudo-element > Universal  |                                                              |
   |                                                                                   |       
   +-----------------------------------------------------------------------------------+

Note:
  !important overrides normal specificity, but should be used sparingly.


--------------------------------------------------------------------------------------
font-awesome:
------------
      - it is a library of icons.
       url: https://fontawesome.com/icons
       cdnLink : https://cdnjs.com/libraries/font-awesome
       cdn means content delivery network.,
       which is used to deliver the content to the user from the server.
syntax:
  link cdn link in html file
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

   <i class="fa fa-home"></i>

------------------------------------------------------------------------------------------------------------------

Table and its tags and its attributes 
-------------------------------------

<table></table -- used to create table
<caption></caption>-- to provide caption of the table
<thead></thead> -- used to create head of the table
<tbody></tbody> -- used to create body of the table
<tfoot></tfoot> --used to create footer of the table

<th></th>  --used to write head content(strong text)
<td></td>  --used to write body content


rowspan and colspan -- these are the properties of th and td tags
rowspan-- used to merge the rows
colspan--used to merge the column

attributes of table:
-------------------
      -border 
      -cellpadding: used to add space between the cells 
      -cellspacing: used to add space between the content of the cells
      -bgcolor: used to add  background color to the table
      -width
      -height
      -align: used to align the table horizontally
      -valign : used to align the table vertically

-----------------------------------------------------------

anchor tag:
-----------
      - it is used to link one page to another page.
      - it is used to navigate between the pages.
      - it is used to create hyperlinks.
    syntax:
       <a href="url">
       
       </a>

attributes of anchor tag:
-------------------------
      -href: used to provide the link of the page.
      -target: used to open the link in new tab.
             :_blank - used to open the link in new tab.
             :_self - used to open the link in same tab.
      -download: used to download the file.

states of anchor tag:
---------------------
1.UnVisted state: when the link is not visited.
                : a:link{
                    
                }
                : default color is blue.
2.visited state: when the link is visited.
                : a:visited{
                    
                }
                : default color is purple/violet.
3.active state: when the link is active.
                : a:active{
                    
                }
                : default color is red.
4.hover state: when the link is hovered.
                : a:hover{
                    
                }               
------------------------------------------------------------
MultiMedia Tags:
----------------

img tag :   used for image 
        : attributes:
            src: used to provide the source of the image.
            alt: used to provide the alternative text of the image.
            width: used to provide the width of the image.
            height: used to provide the height of the image.
            title: used to provide the title of the image.
            border: used to provide the border of the image.
            align: used to align the image.
video tag : used for video
        : attributes:
            src,width,height,autoplay,loop,muted
            controls: used to provide the controls of the video.
            poster: used to provide the poster of the video.
audio tag: used for audio
        : attributes:
            src,autoplay,controls,loop,muted

embed tag: used for image , audio and video 
        : attributes:
            src,type,width,height

iframe tag: used for embedding other content
        : attributes:
            src,width,height,frameborder,allowfullscreen
-------------------------------------------------------------------
marquee tag: used for scrolling content
           attributes:
           behavior: used to provide the behavior of the marquee
                   : scroll - default
                   : slide
                   : alternate
                   
           direction: used to provide the direction of the marquee
                    : left-default
                    : right
                    : up
                    : down
            scrollamount, scrolldelay, loop, bgcolor, width, height

----------------------------------------------------------------------
Form Tags:
------------
    1. <form> tag - used to add a form in the web page
         form attributes:
                  action - used to specify the action of the form
                  method - used to specify the method of the form(get/post--default is get)

    2. <input> tag - used to add an input in the form
         input attributes:
                  type - used to specify the type of the input
                       - type can be text, password, email, number, date, time, url, search, tel, color, range, file, submit , reset, checkbox, radio
                  name - used to specify the name of the input
                  value - used to specify the value of the input
                  placeholder - used to specify the placeholder of the input
                  required - used to specify the required of the input
                  disabled - used to specify the disabled of the input
                  checked - used to specify the checked of the input
                  readonly - used to specify the readonly of the input
                  autofocus - used to specify the autofocus of the input
                  autocomplete - used to specify the autocomplete of the input
                  min - used to specify the min of the input
                  max - used to specify the max of the input
                  pattern - used to specify the pattern of the input
                  step - used to specify the step of the input
                  size - used to specify the size of the input
                  list - used to specify the list of the input

    3. <label> tag - used to add a label to the input
    4. <select> tag - used to add a select in the form
    5. <option> tag - used to add an option to the select
    6. <textarea> tag - used to add a textarea in the form
    7. <button> tag - used to add a button in the form
    8. <fieldset> tag - used to add a fieldset in the form
    9. <legend> tag - used to add a legend to the fieldset
------------------------------------------------------------------------------
 flex
 +++++
    - it is used to align elements
    - it is used to distribute space between/around elements
    - It will arrange elements in cross axis and main axis
    - flex container is main division of flex
    - flex items are child of flex container
    - flex container is used to wrap the flex items


    "display : flex" is used to make flex container
    the default direction is row(left to right) 
    "flex-direction : row-reverse; row; column; column-reverse" is used to change the direction
  


row (left to right)  x axis(main axis)  y axis(cross axis)
column(top to bottom) y axis(main axis) x axis(cross axis)



parent properties :
-------------------

flex-direction : it is used to change the direction of the flex container
                 row(default) ; row-reverse; column; column-reverse

justify-content : it is used to align main axis
                 flex-start(default) ; flex-end; centre; space-around; space-between;space-evenly 


align items : it is used to align cross axis
                 flex-start(default) ; flex-end; centre; 

align-content: It is used to align when there is extra space in the cross axis ,similar to 'justify-content' aligns individual items 
                 flex-start(default) ; flex-end; centre; space-around; space-between;space-evenly 

gap: it used to provide gap between the elements 
row-gap: it is used to provide gap between row elements
column-gap: it is used to provide gap between column elements


child properties/flex items:
---------------------------

flex-shrink:  it is used to shrink elements according to width
    default-1
    0-items wont shrink
flex-grow: it is used to grow element size according to width
    default-0
    
order:it is used to re arrange the order of flex-items

justify-self - to provide justify content property , specifically to a flex item
align-self - to provide align items property , specifically to a flex item

---------------
play and Learn:    https://codingfantasy.com/games/flexboxadventure/play
                   https://flexboxfroggy.com/?utm_source=chatgpt.com
----------------



----------------------------------------------------------------------------------

Grid:
-----

    CSS Grid:
    --------
        CSS Grid is a two-dimensional layout system for the web. It allows you to create 
        complex layouts on the web easily by dividing a page into rows and columns, 
        and placing content into grid cells.

                    Flex                         Grid
    -------------------------------------------------------------------------
    Feature     	Flexbox                  	CSS Grid
    Axis	   One-dimensional (row or col)	    Two-dimensional (row & column)
    Layout	    Content-driven	                Layout-driven
    Use Case	Aligning items in a line	    Building full page layouts
    Overlap	    Not possible	                Possible (items can overlap)
    ----------------------------------------------------------------------------
    Grid Properties
    ++++++++++++++++

    Container Properties:
    ---------------------
    display: grid;
    grid-template-rows : used to define the number of rows in a grid layout
                    : 10px 10px 10px
                    : 10% 10% 10%
                    : 1fr 1fr 1fr (fr-fraction)
                    : repeat(3, 10px)
    grid-template-columns: used to define the number of columns in a grid layout
    grid-template-areas: used to define named areas in a grid layout
                    : "header header header"
                        "sidebar content content"
                        "footer footer footer"
    grid-gap / gap: used to set the gap between grid items
    Note : flex box properties can be used inside grid

    Item Properties:
    --------------
    grid-row-start, grid-row-end
    grid-column-start, grid-column-end
    grid-area
    justify-self, align-self


    Applications in Grid
    ---------------------
            Responsive web layouts
            Dashboards with multiple panels
            Image galleries
            Complex magazine-style layouts
            Overlapping content (e.g., cards over images)
            Aligning forms and controls in two dimensions
            
            
            
            
---------------
play and Learn:    https://cssgridgarden.com/
                  
----------------



=======================================================================================
Responsive Web Design
----------------------



absolute sizes(fixed sizes):
- px (pixels)
- cm (centimeters)
- mm (millimeters)
- in (inches)
- pt (points)
- pc (picas)

relative sizes:
- % (percentage)
- em (em)
- rem (root em)
- vw (viewport width)
- vh (viewport height)
- vmin (minimum of viewport width or height)
- vmax (maximum of viewport width or height)



Breakpoints (Common Sizes):
- Small (sm):        < 640px (mobile)
- Medium (md):   641px – 768px (tablet)
- Large (lg):     769px – 1024px (laptop)
- Extra Large (xl): 1025px – 1280px (desktop)
- Extra Extra Large (xxl): > 1280px (large screens)

Applications:
- Websites that work on all devices (mobile, tablet, desktop)
- E-commerce platforms
- News and blog sites
- Dashboards and admin panels
- Portfolio and business sites


Media Queries:
-------------
Media queries are used to apply different styles to different screen sizes.

Syntax:

@media (min-width: 768px) {
    /* Styles for screens with a minimum width of 768px */
}

@media (max-width: 1024px) {
    /* Styles for screens with a maximum width of 1024px */
}

@media(orientation: landscape) {
    /* Styles for screens in landscape orientation */
}

@media(orientation: portrait) {
    /* Styles for screens in portrait orientation */
}
@media (min-width: 768px) and (max-width: 1024px) {
    /* Styles for screens with a width between 768px and 1024px */
}

@supports (display: grid) {
    /* Styles for browsers that support CSS Grid */
}


==================================================================================================
Semantic Elements:
==================
             Semantic tags are HTML elements that clearly describe their meaning 
             and purpose in the structure of a web page. They make the code more 
             readable and accessible, both for developers and browsers.

Examples of semantic tags:
----------------------------
<header>: Defines the header section of a page or section.
<nav>: Represents navigation links.
<main>: Specifies the main content of the document.
<section>: Groups related content.
<article>: Represents a self-contained piece of content.
<aside>: Contains content aside from the main content (like a sidebar).
<footer>: Defines the footer section.

Benefits:
----------
        Improves accessibility for screen readers.
        Enhances SEO.
        Makes code easier to understand and maintain.



=============================================================================================================


Css Positions:
=============
    1.static
    2.relative
    3.absolute
    4.fixed
    5.sticky


1.static:
    position: static;
    -default value
    -top,right,left,bottom are not set

2.relative:
    position: relative;
    -relative to its normal positions
    -top,right,left,bottom are set
    -other elements are not affected by this element
    -can be used to move an element from its normal position

z-index:it is used to specify the stacking order of elements
    when overlapping each other
    default-0
    higher value means higher z-index
    - used for relative, absolute, fixed, sticky

3.fixed
    position: fixed;
    -fixed to the browser window
    -top,right,left,bottom are set
    -other elements are not affected by this element
    -can be used to move an element from its normal position
    -the element remains in the same position even if the page is scrolled
4.sticky
    position: sticky;
    -sticky to the browser window
    -top,right,left,bottom are set
    -other elements are not affected by this element
    -can be used to move an element from its normal position
    -the element remains in the same position even if the page is scrolled
    -it is a combination of relative and fixed
5.absolute
    position: absolute;
    -absolute to its normal positions
    -top,right,left,bottom are set
    -other elements are not affected by this element
    -can be used to move an element from its normal position
    -it depends on inherited element
    -it need to assign for child elements when the parent is relative, 
    if parent position is not relative then it set with root element  

==================================================================================
    Transition
    -----------
    
    it is used to animate the elements
    it is used to change the style,position of the elements
    it will apply when hover is using 
   
        1.transition-property: it provide information on properties
        2.transition-duration:it is used to provide duration
        3.transition-timing-function:it is used to apply timings
        4.transition-delay:it is used to delay the transition

        shorthand structure:
        transition : property duration timing-function delay;
        transition : property duration;
 
Transition -timing function:
---------------------------
linear: Transition at a constant speed.
ease: Starts slow, speeds up, then slows down (default).
ease-in: Starts slow, then speeds up.
ease-out: Starts fast, then slows down.
ease-in-out: Starts and ends slow, speeds up in the middle.
cubic-bezier(x1, y1, x2, y2): Custom timing curve.
steps(n, start|end): Jumps in steps instead of a smooth transition.

==================================================================================
Javascript:
--------------
      - it is a scripting language
      - it is used to add interactivity and functionality to the web pages
      - the file will save with .js extension
      - the current version of javascript is ECMAScript 2023
        (European Computer Manufacturers Association) 
      - it can be client side or server side scripting language
      - it is a synchronous programming language, it will execute the code line by line
      - it is case sensitive


Javascript integration into html pages:
---------------------------------------
     1.inline javascript
     2.internal javascript
     3.external javascript
 
1.inline javascript: it is applying the javascript to the web pages
                     through element attribute in html file
    ex: <p onclick="alert('hello world');">Lorem ipsum dolor sit amet.</p>

2.internal javascript: it is applying the javascript to the web pages
                       through script tag in html file
    ex: <script>
            alert('hello world');
        </script>

3.external javascript: it is applying the javascript to the web pages
                       through script tag in html file.
                       need to create the external javascript file
    ex: <script src="external.js"></script>


Tokens in javascript:
---------------------
      -tokens are used to define the javascript statements
      -tokens are building blocks in javascript
      
      1.keywords
      2.identifiers
      3.literals(value/data)
      4.operators
      5.Variables and data types

1.keywords: keywords are reserved/predefined words in javascript
          : all keywords are case sensitive (lowercase)
   ex: var, let, const, function, return, break, continue, etc

2.identifiers: identifiers are used to provide names to the variables,
               functions, objects, etc
             : keywords are not allowed as identifiers
   ex: name, age, address, city, state, country, etc

Rules:
-------
     1.keywords cannot be used as identifiers
     2.identifiers cannot start with a number and special characters
     3.identifiers cannot contain special characters(other than _ and $)
conventions:
------------
     1.identifiers should be meaningful names
     2.identifiers should be short and descriptive
     3.identifiers should be lowercase and use camelCase convention 
     ex: firstName 

3.literals: literals are used to provide values/data to the variables
         types of literals:
                1.string literals - ""  or  ''  or template literals(``)
                2.numeric literals  10 , 10.0
                3.boolean literals - true or false
                4.null literals    -null
                5.undefined literals - undefined
                6.function literals
                7.Date literals
                8.Symbol literals

4.operators: operators are used to perform operations on the operands
         types of operators:
                1.arithmetic operators
                2.relational/Comparison operators
                3.logical operators
                4.assignment operators
                5.conditional operators
                6.bitwise operators
                7.typeOf operators


1.arithmetic operators:  binary operators
----------------------
   - used to perform arithmetic/Mathematical operations
        + addition
        - subtraction
        * multiplication
        / division (quotient)
        % modulus (remainder)
        ** exponent (power)


   increment operator: increase the value by 1
                     : unary operator
                   1. Post increment operator : value++
                                              : use the value first and then increment
                   2. Pre increment operator  : ++value
                                              : increment the value first and then use
   decrement operator: decrease the value by 1
                     : unary operator
                   1. Post decrement operator : value--
                                              : use the value first and then decrement
                   2. Pre decrement operator  : --value
                                              : decrement the value first and then use
     

2.Relational Operator:(Comparison) - binary operators
---------------------------------
         -used to compare the operands
         -returns boolean value
                == equals to (it check values)
                != not equals to
                <  less than
                > grater than
                <= less than or equals
                >= grater than or equals
                === strict equality operator(it checks values along with data type)
                !== not strict equality operator

3.logical operators:
-------------------
      - used to perform logical operations on the operands(boolean values)
      - returns boolean value
        && and  - binary operator
        || or  - binary operator
        ! not - unary operator
------------------------------------------------------------------------
      &&                         ||                        !
------------------------------------------------------------------------
true  && true = true       true  || true = true       !true = false
true  && false = false     true  || false = true      !false = true
false && true = false      false || true = true     
false && false = false     false || false = false  
-----------------------------------------------------------------------
  

4. assignment operators:(compound assignment operators)
--------------------------------------------------------
   - used to assign values to the variables by performing Mathematical operations
   += addition
   -= subtraction
   *= multiplication
   /= division (quotient)
   %= modulus (remainder)
   **= exponent (power)

5. conditional operators:(ternary operator)
-------------------------------------------
        - used to perform conditional operations
        - returns boolean value

syntax: operand1? operand2:operand3
        
        condition ? expression1/value1/variable1 : expression2;
                       true                           false


6. bitwise operators:
--------------------
      - used to perform bitwise operations on the operands(binary values-bits)
      - returns integer value
        & and  - binary operator
        | or  - binary operator
        ~ not  - unary operator
        ^ xor  - binary operator
        << left shift  - binary operator
        >> right shift  - binary operator
       useCases:  
             1. In low level programming, it is used to perform bit operations 
              on the operands
             2. Data encryption



-------------------------------------
A      1     0    0     1

B      0     1    0     1
-------------------------------------               
&      0     0    0     1

|      1     1    0     1

~      1     0    1     0   (B)

^      1     1    0     0

-----------------------------------------

  

7. typeOf operators:
-------------------
   - used to get the data type of the variable

---------------------------------------------------------------------------------------------------------------------

Variables:
+++++++++
     - used to store the values/data
     - variables can be declared using var, let, const keywords
variable declaration:
---------------------
     - variables can be declared using var, let, const keywords
variable initialization:
-------------------------
      - values are assigning to the variables using = operator
variable re-initialization:
--------------------------
     - re assigning the values to the existing variables 
variable re declaration:
-------------------------
     - re declaring the variables using var, let, const keywords
variable hoisting:
------------------
     - variables are using before  declaring and initialization
-----------------------------------------------------------------
                        var                let              const
-----------------------------------------------------------------
declaration without    yes                 yes              no
initialization         

re-initialization       yes                 yes             no

re-declaration          yes                 no              no

hoisting                yes                 no              no

scope                function scope      block scope     block scope
-----------------------------------------------------------------

Data types:
+++++++++++
     - used to define the type of data stored in the variable
     - type of operator is used to get the data type of the variable
     - types of data types:
       1. primitive data types
       2. reference data types
1.primitive data type:
------------------------
      - used to store the primitive values
      - primitive data types are:
        1. number- ex: 10, 20, 30 , 50.5
        2. string - ex: "hello", 'world',`hello world`
        3. boolean- ex: true, false
        4. null 
        5. undefined
        6. symbol - ex: Symbol()

2.Non primitive data types/reference data types:
-----------------------------------------------
      - used to store the non primitive values
      - non primitive data types are:
        1. array - ex: [10, 20, 30, 40, 50]
        2. object - ex: {name: "john", age: 30, address: "new york"}
                  - ex: new ClassName();
        3. function- ex: function(){}
        4. regex- ex: /hello/
=========================================================================

Conditional statements:
++++++++++++++++++++++
   - the statements that are executed based on the condition
   - the condition can be true or false
   - if conditions returns true , then block of code will be executed
     or else block of code will be skipped
  Types:
  -----
      1.if 
      2.if-else/else-if
      3.else if ladder 
      4.switch case
      5.nested if

if condition:
-------------
  syntax:   if(condition){
               // block of code
             }
   - the condition can be true or false
   - if conditions returns true , then block of code will be executed
     or else block of code will be skipped

if - else condition:
-------------------
   syntax:   if(condition){
               // block of code
             }
             else{
               // block of code
             }
   - the condition can be true or false
   - if conditions returns true , then if block will execute 
     or else else block will execute

else if ladder / if -else - if condition:
-----------------------------------------
   syntax:   if(condition){
               // block of code
             }
             else if(condition){
               // block of code
             }
             . . . . .
             else{
               // block of code
             }
   - the condition can be true or false
   - it consist multiple if conditions , if any condition returns true
     then block of code will be executed or
     else block of code will be skipped
   - if none of the conditions returns true , 
     then else block of code will be executed(it is optional)

Note: if condition is mandatory for if - else - if ladder, but 
      else block of code is optional

switch case:
-------------
   syntax:   switch(expression/value/variable){
               case value1:
                 // block of code
                 break;
               case value2:
                 // block of code
                 break;
               .  .  .  .
               default:
                 // block of code
             }
   - the expression can be any value
   - the case can be any value
   - the default case is optional , when none of the cases matches
     then default block of code will be executed
   - switch case is used to perform multiple conditional operations
     by comparing the expression with the each case values



nested if condition:
-------------------
     - condition statements used in another condition statements
     syntax:
              if(condition1){
                if(condition2){
                  // block of code
                }
              }
      - if the outer condition1 returns true then it will check  inner condition2 
=========================================================================================================
looping statements:(iterations)
++++++++++++++++++
          - the statements(block or code) that are executed multiple times until the condition become false
          - the condition can be true or false
          types:
          1. while loop
          2. do while loop
          3. for loop
          4. for in loop
          5. for of loop
          6. nested loop
          
1.while loop:
------------
   syntax:   while(condition){
               // block of code
             }
   - the condition is checked before executing the block of code
   - no.of minimum execution is 0
2.do while loop:
---------------
   syntax:   do{
    
             }while(condition);
    - the condition is checked after executing the block of code
    - no.of minimum execution is 1
3.for loop:
-----------
   syntax:   for(initialization; condition; increment/decrement){
    
            }
4.for in loop:
--------------
   syntax:   for(variable in object){
    
            }
   - the object can be array, object, string
   - the object can be accessed using the index 
5.for of loop:
--------------
   syntax:   for(variable of object){
    
            }
   - the object can be array, string
   - the object can be accessed using the values
6.nested loop:
--------------
   - loop can be nested inside another loop
============================================================================================================
 
Functions:
    --it is a block of code that performs a specific task
    --it is a re-usable block of code
    --it is a collection of statements that performs a task
------------------------------------------------------
why functions
    1.code reusability
    2.code maintainability
    3.code readability
    4.code Organization
    5.Scalability
 
--------------------------------------------------
Based on arguments:
      1.with arguments
      2.without arguments
Based on return type:
      1.with return type
      2.without return type

--------------------------------------------------

types:
        function declaration
        function expression
        arrow functions
        callback functions
        constructor functions
        generator functions
        IIFE
        higher order functions

==============================================================

1.function declaration/named function/general function
-----------------------------------------------------
      - can be hoisted
syntax:
 function functionName/Identifier(){
     //set of sentences that performs a task
 }


 //passing arguments 
 function funct_Name(arg1, arg2.......){
     
 }
 funct_Name(arg1, arg2.......);


 //return statement
 function funct_Name(arg1, arg2.......){
     return result;
 }
 let result=funct_Name(arg1, arg2.......);

==============================================================

2.function expression
------------------

syntax: 
       let result = function(arg1, arg2.......){

          return result;  
        }

        result(arg1,arg2.....);
       
===============================================================
3.arrow functions:
------------------
          shorter syntax than regular function
syntax:

    let data=  ()=>{

         }

ex:   (ar1,ar2)=>{
       //specific task
      }

=============================================================
4.constructor function:
    -it is a special function that is used to create objects

syntax:
 
        function Person(name, age){
            this.name=name;
            this.age=age;
        }

      const  data=new Person('ram',20);

=============================================================
5.Call back function :
    -it is a function that is passed as an argument to another function
    -it is a function that is called by another function


syntax:

    function functionName(arg1, arg2 , func_2 , func_3){
        //set of sentences that performs a task
    }

    functionName(arg1,arg2, func_2, func_3);

=============================================================
6.Generator function:
    -it is a function that is used to create iterators/generators

syntax:

    function* functionName(){
    yield 1;
    .
    .
    .
    yield n;
}

========================================================================
7.IIFE:
    -immediately invoked function expression
    -it is a function that is called immediately after it is defined

syntax:

   (
       function(){
          //set of sentences that performs a task 
       }
   )();

=============================================================
8.higher order functions:
    -it is a function that is passed as an argument to another function
    -takes a function as an argument and returns a function
    
syntax:
    function functionName(arg1, arg2 , func_2 ){
        //set of sentences that performs a task
        return func_2(arg1,arg2);
    }


-----------------------------------------------------------------------------------------------------------------
    
  call back hell:(nested functions/pyramid of functions)
  =======================================================
         - it is a situation where multiple functions are nested inside each other,
           which makes the code complex , difficult to understand and debug
        - it is a traditional way of writing code to achieve a particular task
        - it is not recommended to use call back hell in real time projects
        - to avoid we can use promises(async/await or then/catch)

Promises:
==========
    - Promises is an object that represents the result of an asynchronous operation
    - it is used to handle asynchronous operations
    - Creation of Promises:
                     1.through new keyword and constructor function
                     2.through Promise.resolve()
                     3.through Promise.reject()
    - Promise states:
                     1.pending
                     2.fulfilled/Success/resolved
                     3.rejected
    - can handle promises using then/catch
      -then() method is used to handle the success case
      -catch() method is used to handle the error case
      -finally() method is used to handle the final case
    -can handle promises using async/await
    -async keywords need to declare before the function
    -await keyword need to use inside the function
      syntax: async function functionName(){
               try{
                 await functionName1();
               }
               catch(error){
                 // block of code
               }
             }

----------------------------------------------------------------------------------------------
feature                     .all                   .race               .allSettled   
----------------------------------------------------------------------------------------------
wait for all promises    yes                     no                   yes
fails fast               on first reject         if first rejects     never fails
use case                 all must succeed        first win            get all outcomes
return                   array                   first value          all results with
                                                                      status and value/reason

----------------------------------------------------------------------------------------------

Object:
++++++
    - Object is a real world entity, which is a non primitive data type
    - Object is a collection of key-value pairs
    - Object is a collection of properties and methods/functions

real world entity : Laptop
        
        Laptop: properties/behaviors-> color, model , price , name..etc 
        
        Laptop: actions/functions-> turnOn, turnOff, charge, watchingVideo, playingGame..etc

  creation of Object:
  ===================    
                 1.constructor function
                 2.object literal
                 3.object.create()
                 4.class and constructor

  1.constructor function:
  ------------------------
           - it is a function that is used to create an object
           syntax:
                   function ClassName(){
                     // block of code
                   } 
                   new ClassName();-- creating object through new keyword and constructor function
  2.object literal:
  ------------------
           - it is a way to create an object
           syntax:
                   var objectName = {
                      key1=value1,
                      key2=value2,
                      .......
                      keyN=valueN
                    }   


prototype:
++++++++++
    - prototype is a property of an object that is used to create a new object
    - to create new object we need to use Object.create() method
    - prototype is used to add properties and methods to an object
    - prototype is used to inherit properties and methods from a parent object

prototype chaining:
++++++++++++++++++
      - is a process of inheriting properties and methods from a parent object 
        to a child object
      - it helps to share properties and methods between objects
      - prototype chaining is used to create a hierarchy of objects

4.Class:
==========
     - class is a template/blueprint for creating objects
     - it is a combination of constructor function and prototype
     - it is a combination of properties and functions
     creation of class:
                       1. class declaration
                       2. class expression
    syntax:
         class ClassName{  // class declaration
           constructor(){

           }
         }
         let ClassName = class{  // class expression

         }

============================================================================================= 

JSON :(JavaScript Object Notation)
======
      - json is a plain text format for storing and transmitting data
      - json is a lightweight data interchange format
Rules:
------
     1.json object is a collection of key-value pairs
     2.key and value are separated by a colon(:)
     3.key and value pairs are separated by a comma(,)
     4.key must be a string
     5.value can be a string, number, boolean, null, object, array
     6.json array is an array of json objects which is enclosed by square brackets([])
     7.nested json object is an object that is a property of another json object


JSON Objects:
++++++++++++++
        syntax:  {
                   "key1":value1,
                   "key2":value2,
                   ......
                   "keyN":valueN
                 }

    ------------------------------------------------------------------------------
  feature             JavaScript Object                           JSON Object
    ------------------------------------------------------------------------------
  keys                key can be string or                  keys must be string
                      can indicates directly

  values            value can be any data type            value can be any data type

    ------------------------------------------------------------------------------
 Json websites:
      

         1. https://jsonexamples.com/

         2. https://dummyjson.com/

         3. https://jsonplaceholder.typicode.com/

         4. https://jsonformatter.org/

         5. https://fakestoreapi.com/



JSON Arrays: collection of similar values/json objects
+++++++++++
  syntax: [10,20,30,40]
          ["apple","banana","mango","orange"]
          [{"name":"john","age":30},{"name":"jane","age":25}]


Object Methods:
++++++++++++++
      1.Object.keys(): used to get the keys of the object
      2.Object.values(): used to get the values of the object
      3.Object.entries(): used to get the key-value pairs of the object     

  Note: it returns array of data .   

Merge JSON Objects:
++++++++++++++++++
          - merging or concatenating two json objects
          - it is used to add the properties of one object to another object
          syntax: obj1 = {...obj1,...obj2} --->(...) is called spread operator
                       or
                  obj1 = Object.assign(obj1,obj2)
Note: -if keys are same then the value of the second object will be
      assigned to the first object
      -keys must be unique
      
Access JSON Properties:
++++++++++++++++++++++
          - with dot notation and bracket notation
Add JSON Properties:
++++++++++++++++++
          - can add new properties to a json object with dot notation and bracket notation
          - Object.assign() method can be used to add new properties to a json object
Delete JSON Properties:
+++++++++++++++++++++
          - can delete properties from a json object with dot notation and bracket notation
          - using delete keyword
      syntax: delete objName.keyName
Iterate JSON Objects:
++++++++++++++++++++
         - for iterating , we can use forEach loop , for of loop , for in loop 
           and basics loops.

forEach loop:
--------------
       - it is a function that is used to iterate over the elements of an array
       - it takes a callback function as an argument
      syntax:
                arrName.forEach(functionName);
                 
for of loop:
------------
       - it is used to iterate over the elements of an array
       - it returns the value of the elements of the array
      syntax:
                for(let value of arrName){
                  // block of code
                }                
for in loop:
------------
       - it is used to iterate over the properties of an object
       - it returns the key of the properties of the object
      syntax:
                for(let key in objName){
                  // block of code
                }                
  

Destructuring JSON Objects:
++++++++++++++++++++++++++
       - it is a way to extract the properties of an object and assign them 
         to variables
       - it is used to assign the properties of an object to variables
      syntax:
                let {key1,key2,key3} = objName;

  Destructuring with default values:
  -----------------------------------
                let {key1,key2,key3="value3"} = objName;
  Destructuring with new variable names:
  -------------------------------------
                let {key1:keyName1,key2:keyName2,key3:keyName3} = objName;
  ==================================================================================================================
  
    =================================================================================================================
  Arrays:
  ++++++++
      - arrays are a collection of values
      - arrays are used to store multiple values of different data types in a single variable
      - arrays are non primitive data type
      - arrays are denoted by square brackets([])
      - arrays are mutable(can be changed)
      - arrays are indexed (start from 0)

creation of array:
=================
          1.array literal
          2.array constructor
          3.array.from()
          4.array.of()


1.array literal:
----------------
          - it is a way to create an array 
          syntax:
                  var arrayName = [value1,value2,value3];
2.array constructor:
-------------------
          - by using new keyword and constructor function
          syntax:
                  var arrayName = new Array(value1,value2,value3);
                               or
                  var arrayName= new Array();// creating empty array
                               or
                  var arrayName = Array(7);// creating array with 7 empty elements

3.Array.from():
----------------
          - it is a function that is used to create an array from another array
          - by using Array.from() method 
          syntax:
                  var arrayName = Array.from(arrayName1);

4.Array.of():
----------------
           - it is a function that is used to create an array from multiple values
           - by using Array.of() method 
           syntax:
                   var arrayName = Array.of(value1,value2,value3);
                        or 
                   var arrayName = Array.of(10);//[10]-- it will consider it as a
                    value and not as an size of array


Iterating Arrays:
=================
              1.while or do while loop
              2.for loop 
              3.for of loop : iterates over the elements of an array
              4.for in loop : iterates over the index position of an array
              5.forEach method
              6.map method
              7.filter method
map();
------
    -map is a function that is used to iterate over the elements of an array
    -it returns a new array with the same length as the original array
    -it takes a callback function as an argument
    syntax:
      array.map(
        (element,index,array)=>{
          //code 
        }
      );

  note: index and array are optional parameters
filter():
---------
    -filter is a function that is used to iterate over the elements of an array
    -it predicates the elements of an array based on a condition
    -it returns a new array , there is a possibility of changing the length of the array
    -it takes a callback function as an argument
    syntax:
      array.filter(
        (element,index,array)=>{
          //code 
        }
      );

  note: index and array are optional parameters

  reduce():
-----------
    -reduce is a function that is used to iterate over the elements of an array
    -it reduces the elements of an array to a single value
    -it returns a single value
    -it takes a callback function as an argument
    syntax:
      array.reduce(
      
        (accumulator,current_element,index,array)=>{
          //code 
        },initialValue
      );
    
note: initialValue , index and array are optional parameter

---------------------------------------------------------------------------
             map()                  filter()                            reduce()
----------------------------------------------------------------------------
use       to process             to filter based on a condition       to reduce the elements of an 
                                                                      array to a single value

returns   a new array            a new array                          a single value

return    same length            length may change                    single value
size                                                                  size=1
----------------------------------------------------------------------------

pop(): 
-------
    -pop is a function that is used to remove the last element of an array
    -it returns the removed element
    syntax:
      array.pop();

shift():
-------
    -shift is a function that is used to remove the first element of an array
    -it returns the removed element
    syntax:
      array.shift();

Note: pop() and shift() will modify the original array

push():
-------
    -push is a function that is used to add an element to the end of an array
    -it returns the length of the array
    syntax:
      array.push(value1,value2,value3);

unshift():
-------
    -unshift is a function that is used to add an element to the beginning of an array
    -it returns the length of the array
    syntax:
      array.unshift(value1,value2,value3);
  
Note : unshift() and push() will modify the original array

every():
-------
        - it is a function that is used to iterate over the elements of an array
        - it returns true if all the elements of the array satisfy the condition
        - it takes a callback function as an argument
        syntax:
          array.every(
            (element,index,array)=>{
              //code 
            }
          );
some():
-------
      - it is a function that is used to iterate over the elements of an array
      - it returns true if any of the elements of the array satisfy the condition
      - it takes a callback function as an argument
      syntax:
        array.some(
          (element,index,array)=>{
            //code 
          }
        );

includes():
----------
        - it is a function that is used to check if an element is present in an array
        - it returns true if the element is present in the array
        - it takes an element as an argument
        syntax:
          array.includes(element);
Note: if we want to check if an element is present in an array from a certain index then we can use includes()
       syntax: 
         array.includes(element,index);

find():
-------
       - it is a function that is used to iterate over the elements of an array
       - it returns the first element of the array that satisfies the condition
       - it takes a callback function as an argument
       syntax:
         array.find(
           (element,index,array)=>{
             //code 
           }
         );


Note : find() will return undefined if the element is not present in the array

findIndex():
------------
      - it is a function that is used to iterate over the elements of an array
      - it returns the index of the first element of the array that satisfies the condition
      - it takes a callback function as an argument
      syntax:
        array.findIndex(
          (element,index,array)=>{
            //code 
          }
      )

findLastIndex():
---------------
        - it is a function that is used to iterate over the elements of an array
        - it returns the index of the last element of the array that satisfies the condition
        - it takes a callback function as an argument
        syntax:
          array.findLastIndex(
            (element,index,array)=>{
              //code 
            }
          )


Note:  findIndex() and findLastIndex() will return -1 if the element is not present in the array


slice():
--------
       - it is a function that is used to extract a part of an array
       - it returns a new array
       - it takes a start index and an end index as arguments
       syntax:
         array.slice(startIndex,endIndex);

Note: startIndex is including and endIndex is excluding,
     if we are not specifying end index then it will return all the elements 
     from startIndex to the end of the array

concat():
--------
       - it is a function that is used to concatenate two or more arrays
       - it returns a new array
       - it takes one or more arrays as arguments
       syntax:      
         array.concat(array1,array2,array3);

splice():
--------
      - it is a function that is used to add or remove elements from an array
      - it returns a new array
      - it takes a start index and an end index as arguments
      syntax:
        array.splice(startIndex,endIndex,value1,value2,value3);

note:- startIndex and endIndex are including
     - values are optional , if we want to add elements to the array then we can use values 
     - array.splice(startIndex);- from startIndex to the end of the array elements will remove
    


reverse():
--------
      - it is a function that is used to reverse the elements of an array
      - it returns a new array
      syntax:
        array.reverse();

sort():
------
      - it is a function that is used to sort the elements of an array
      - it returns a new array
      - it takes a callback function as an argument
      syntax:
        array.sort(
          (element1,element2)=>{
            //code 
          }
      )

join():
------
    - it is a function that is used to join the elements of an array
    - it returns a string
    - it takes a separator as an argument
    syntax:
      array.join(separator);

String methods:
++++++++++++++++

charAt(): 
--------
      - it is a function that is used to get the character at a specific index of a string
      - it returns the character at the specified index
      - it takes an index as an argument
      syntax:
        string.charAt(index);

note: if character is not present in the string then it will return an
       empty string/whitespace

match():
----------
       - it is a function that is used to match a regular expression against a string
       - it returns an array of matches
       - it takes a regular expression as an argument
       syntax:
         string.match(regularExpression);

padEnd():
--------
     - it is a function that is used to add padding to the end of a string
     - it returns a new string
     - it takes a length and a character as arguments
     syntax:
       string.padEnd(length,character);

padStart():
--------
     - it is a function that is used to add padding to the start of a string
     - it returns a new string
     - it takes a length and a character as arguments
     syntax:
       string.padStart(length,character);

repeat():
--------
     - it is a function that is used to repeat a string
     - it returns a new string
     - it takes a number as an argument
     syntax:
       string.repeat(number);

replace():
----------
      - it is a function that is used to replace a substring in a string
      - it returns a new string
      - it takes a regular expression and a replacement string as arguments
      syntax:
        string.replace(regularExpression,replacementString);



split():
--------
       - it is a function that is used to split a string into an array
       - it returns a new array
       - it takes a separator as an argument
       syntax:
         string.split(separator);

startsWith():
------------
      - it is a function that is used to check if a string starts with a substring
      - it returns true if the string starts with the substring
      - it takes a substring as an argument
      syntax:
        string.startsWith(substring);

endsWith():
-----------
       - it is a function that is used to check if a string ends with a substring
       - it returns true if the string ends with the substring
       - it takes a substring as an argument
       syntax:
         string.endsWith(substring);

toLowerCase():
--------------
       - it is a function that is used to convert a string to lowercase

toUpperCase():
--------------
        - it is a function that is used to convert a string to uppercase
trim():
------
        - it is a function that is used to remove whitespace from the start and end of a string
trimStart():
-----------
        - it is a function that is used to remove whitespace from the start of a string

trimEnd():
----------
       - it is a function that is used to remove whitespace from the end of a string

valueOf():
----------
       - it is a function that is used to convert a string to a primitive value
       - it returns the string
       syntax:
         string.valueOf();

indexOf():
----------
       - it is a function that is used to get the index of a substring in a string
       - it returns the index of the first occurrence of the substring
       - it takes a substring as an argument
       syntax:
         string.indexOf(substring);
lastIndexOf():
--------------
        - it is a function that is used to get the index of the last occurrence of a substring in a string
        - it returns the index of the last occurrence of the substring
        - it takes a substring as an argument
        syntax:
          string.lastIndexOf(substring);

substring():
------------
        - it is a function that is used to get a substring from a string
        - it returns a new string
        - it takes a start index and an end index as arguments
        syntax:
          string.substring(startIndex,endIndex);

================================================================================================================================================
BOM(Browser Object Model):
+++++++++++++++++++++++
    - it is a global object that is used to access the properties
       and methods of the browser
    - like window,screen,navigator,history,location, document etc..
    - it is a read-only and predefined object
         
DOM(Document Object Model):
+++++++++++++++++++++++
     - it is a global object that is used to access the properties
       and methods of the document
     - helps to add and remove elements from the document,
       provides css styling to elements and functionalities to elements
     - it is a read-only and predefined object
  
Note : to access the DOM elements we need to use the document object
       to access the BOM elements we need to use the window object

use of document object:
-----------------------
        1.Element Creation , Manipulation and Accessing
        2.Css styling
        3.Event Handling

Element Accessing:
===================
          - can access elements by using the document object
        1.getElementById(): used to access the element by id
                          : returns the first element with the specified id
        2.getElementsByClassName(): used to access the element by class
                                  : returns an array of all the elements with the specified class
                                    in the format of HtmlCollection
        3.getElementsByTagName():used to access the element by tag name
                                : returns an array of all the elements with the specified tag name
                                  in the format of HtmlCollection

        4.querySelector(): used to access the first element that matches the specified selector
                         : returns the first element that matches the specified selector
        5.querySelectorAll() : used to access all the elements that match the specified selector
                             : returns an array of all the elements that match the specified selector
                               in the format of NodeList

Attribute Manipulation:
=======================
    1.setAttribute(): used to add an attribute to an element
              syntax:
                elementName.setAttribute(attributeName,attributeValue);
    2.removeAttribute(): used to remove an attribute from an element
              syntax:
                elementName.removeAttribute(attributeName);
    3.getAttribute(): used to get the value of an attribute of an element
              syntax:
                elementName.getAttribute(attributeName);
    4.hasAttribute(): used to check if an element has an attribute
                    : returns true if the element has the attribute and false otherwise
              syntax:
                elementName.hasAttribute(attributeName);


                
Element Manipulation:
=================
            1.createElement(): used to create an element
                      syntax:
                        document.createElement(elementName);
            2.adding the created element to the document
            types:
                1.append() : used to add the element to the end of the document
                  syntax:  document.body.append(elementName);
                2.prepend() : used to add the element to the start of the document
                  syntax: document.body.prepend(elementName);
                3.insertBefore() : used to add the element before the specified element
                  syntax: document.body.insertBefore(elementName,elementName);
                4.replaceChild() : used to replace the specified element with the new element
                  syntax: document.body.replaceChild(elementName,elementName);
                5.removeChild() : used to remove the specified element from the document
                  syntax: document.body.removeChild(elementName);

CSS styling:
=============
    1.style: used to add css styling to the element
           : acts like an object , and work like inline css
              syntax:
                elementName.style.propertyName=propertyValue;
            :getComputedStyle(): used to get the computed style of the element    
    2.classList(): used to add css classes to the element
                  syntax:
                        - used to add css classes to the element
                    elementName.classList.add(className);
                         - used to remove css classes from the element
                    elementName.classList.remove(className);
                         - used to toggle css classes to the element(add or remove)
                    elementName.classList.toggle(className);
                         - used to check if the element has the css class
                    elementName.classList.contains(className);



function and event:
===================
    
   function : it is a block of code that is used to perform a task
   event : it is a trigger that is used to perform a task

example of events:
-------------------
              click event
              keypress event
              mouseover event
              mouseout event etc ,.

Event creation:
-----------------
      - events can be created by using the document object
        syntax: document.createElement(eventName);
      - events can be given in elements by using the addEventListener() method
        syntax: elementName.addEventListener(eventName, callBackFunction);
      - events can be added to the element 
        syntax <button eventName="">Click Me</button>

Event Manipulation/Handling:
=====================
   1.addEventListener(): used to add an event listener to the element
              syntax:
                elementName.addEventListener(eventName, callBackFunction);
   2.removeEventListener(): used to remove an event listener from the element
              syntax:
                elementName.removeEventListener(eventName, callBackFunction);
   3.dispatchEvent(): used to dispatch an event on the element
                     : means trigger the event when the event listener is added
              syntax:
                elementName.dispatchEvent(new Event(eventName));



Event Bubbling:
--------------
      - it is a concept that is used to handle events in the DOM
      - it helps to propagate the event from the child to the parent
      - it is a default behavior
ex: 
    <div>
        <p>Click Me</p>
    </div>
     
     p---->div---->body : propagating the event from child to parent
    
Event Capturing:
----------------
        - it is a concept that is used to handle events in the DOM
        - it helps to propagate the event from the parent to the child
ex: 
    <div>
        <p>Click Me</p>
    </div>
     
     body---->div---->p : propagating the event from parent to child

Note : to achieve event bubbling we need to add event listener to the parent 
   element and event capturing we need to add event listener to the child element
    : need to add true as the second argument to the addEventListener() method
    syntax: elementName.addEventListener(eventName, callBackFunction,true);

-->to stop propagation of the event , we need to use stopPropagation() method
    syntax: event.stopPropagation();